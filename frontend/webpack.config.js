const webpack = require('webpack');
const chokidar = require('chokidar');
const kill = require('tree-kill');
const path = require('path');
const chalk = require('chalk');

const DotenvPlugin = require('dotenv-webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const HtmlReplaceWebpackPlugin = require('html-replace-webpack-plugin');
const ScriptExtHtmlWebpackPlugin = require('script-ext-html-webpack-plugin');
const FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');
const SpriteLoaderPlugin = require('svg-sprite-loader/plugin');
const WebpackNotifierPlugin = require('webpack-notifier');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const { spawn } = require('child_process');

const autoprefixer = require('autoprefixer');
const normalizeCharset = require('postcss-normalize-charset');
const cssnano = require('cssnano');

const dotenv = require('dotenv').config().parsed;
const { pages } = require('./src/pages.config');

const { SERVE_PORT, REAL_PORT } = dotenv;

const PATHS = {
   src: path.resolve(__dirname, 'src'),
   dist: path.resolve(__dirname, '../public/dist'),
   views: path.resolve(__dirname, '../resources/views'),
   logo: path.join(__dirname, 'src/img/logo/logo-96.png'),
   node_modules: path.resolve(__dirname, 'node_modules'),
};

const minifyOptions = {
   collapseWhitespace: true,
   conservativeCollapse: true,

   ignoreCustomFragments: [/\{\{[\s\S]*?\}\}/],

   caseSensitive: true,

   minifyJS: true,
   minifyCSS: true,

   removeRedundantAttributes: true,
   removeAttributeQuotes: true,
   removeComments: true,

   includeAutoGeneratedTags: false,
};

const htmlReplacements = [
   ['@blank', 'target="_blank" rel="noopener noreferrer"'],
   ['xmlns="http://www.w3.org/2000/svg"', ''],
   ['xlink:href="@icons/', `/img/sprite.svg?${Math.floor(Date.now() / 1000)}#`],
].map(([search, replace]) => ({ search, replace, flags: 'g' }));

let devServer = null;
let backendProcess = null;

module.exports = ((env = {}) => {
   const isDev = (env.NODE_ENV === 'development');
   const hashType = (!isDev) ? '[contenthash]' : '';

   const maps = ('maps' in env) ? env.maps !== 'false' : !isDev;
   const compact = ('compact' in env) ? env.compact !== 'false' : isDev;
   const manageBackend = ('backend' in env) ? env.backend !== 'false' : isDev;
   const isServe = 'WEBPACK_DEV_SERVER' in process.env;

   /** @type {import('webpack/declarations/WebpackOptions').WebpackOptions} */
   const config = {
      context: PATHS.src,
      mode: (isDev) ? 'development' : 'production',
      stats: (compact) ? 'none' : 'normal',
      devtool: (maps) ? 'source-map' : 'eval',
      entry: {
         ...getPagesEntries(pages),
      },
      output: {
         filename: `scripts/[name].${hashType}.js`,
         path: path.resolve(__dirname, PATHS.dist),
         publicPath: '/dist/',
      },
      optimization: {
         splitChunks: false,
         removeAvailableModules: !isDev,
         removeEmptyChunks: !isDev,
         noEmitOnErrors: true,
      },
      resolve: {
         symlinks: false,
         extensions: ['.js'],
         alias: {
            '@': PATHS.src,
         },
      },
      devServer: {
         proxy: {
            '/': `http://localhost:${REAL_PORT}`,
         },
         writeToDisk: (path) => /\.blade.php$/i.test(path),
         port: SERVE_PORT,
         quiet: compact,
         stats: { colors: true },
         overlay: true,
         hot: true,
         watchOptions: {
            ignored: [PATHS.node_modules, PATHS.dist],
         },

         disableHostCheck: true,

         before(_, server) {
            devServer = server;

            watchTemplateFiles();

            if (manageBackend) {
               watchPhpFiles();
            }
         },
      },
      module: {
         strictExportPresence: true,
         rules: [{
            enforce: 'pre',
            test: /\.js$/,
            exclude: PATHS.node_modules,
            loader: 'eslint-loader?fix=true',
         }, {
            test: /\.js$/i,
            use: [{
               loader: 'babel-loader',
               options: {
                  cacheDirectory: true,
                  sourceMaps: maps,
                  presets: [
                     ['@babel/preset-env', {
                        'targets': { esmodules: true },
                     }],
                  ],
                  plugins: [
                     '@babel/plugin-proposal-optional-chaining',
                     '@babel/plugin-proposal-class-properties',
                  ],
               },
            }],
         }, {
            test: /\.(scss|css)$/i,
            sideEffects: true,
            use: [{
               loader: MiniCssExtractPlugin.loader,
               options: {
                  hmr: isDev,
                  reloadAll: false,
                  esModule: true,
               },
            },
            `css-loader?sourceMap=${maps}`,
            ...(!isDev ? [{
               loader: 'postcss-loader',
               options: {
                  plugins: [
                     normalizeCharset(),
                     autoprefixer(),
                     cssnano(),
                  ],
                  sourceMap: maps,
               },
            }] : []), {
               loader: 'sass-loader',
               options: {
                  sourceMap: maps,
                  additionalData: `@import "~@/styles/disappearing";`,
               },
            }],
         }, {
            test: /\.blade.php$/i,
            include: PATHS.src,
            use: [
               'ejs-loader?variable=$',
               'extract-loader',
               {
                  loader: 'html-loader',
                  options: {
                     attrs: [
                        ':src',
                        ':data-src',
                        ':srcset',
                        ':data-srcset',
                        'link:href',
                     ],
                  },
               }, {
                  loader: 'string-replace-loader',
                  options: {
                     multiple: htmlReplacements,
                  },
               },
            ],
         }, {
            test: /\.html$/i,
            include: PATHS.src,
            use: [{
               loader: 'html-loader',
               options: {
                  minimize: !isDev ? minifyOptions : false,
                  attrs: [
                     ':src',
                     ':data-src',
                     'link:href',
                  ],
               },
            }, {
               loader: 'string-replace-loader',
               options: {
                  multiple: htmlReplacements,
               },
            }],
         }, {
            test: /\.(svg)$/i,
            loader: `svg-sprite-loader`,
            options: {
               extract: true,
               symbolId: (filePath) => `${path.basename(filePath)}`,
            },
            include: path.resolve(__dirname, 'src/img/icons'),
         }, {
            test: /\.(png|jpe?g|webp|svg|git|ico)$/i,
            loader: `url-loader?name=[path][name].[ext]&esModule=false&limit=2000`,
            include: path.resolve(__dirname, 'src/img'),
            exclude: path.resolve(__dirname, 'src/img/svg'),
         }, {
            test: /\.(woff|woff2)$/i,
            loader: `file-loader?name=icons/[name].[ext]?${hashType}&esModule=false`,
            include: path.resolve(__dirname, 'src/icons'),
         }, {
            test: /\.(woff|woff2)$/i,
            loader: `file-loader?name=fonts/[name].[ext]&esModule=false`,
            include: path.resolve(__dirname, 'src/fonts'),
         }],
      },
      plugins: [
         new webpack.ProgressPlugin({
            profile: false,
         }),

         new DotenvPlugin(),

         new CleanWebpackPlugin({
            cleanStaleWebpackAssets: false,

            cleanOnceBeforeBuildPatterns: [PATHS.dist, PATHS.views],
            verbose: true,
            dangerouslyAllowCleanPatternsOutsideProject: true,
            dry: false,
         }),

         ...(!env.noNotify ? [
            new WebpackNotifierPlugin({
               title: 'HUM-DASHBOARD',
               contentImage: PATHS.logo,
               excludeWarnings: isDev,
            }),
         ] : []),

         new HtmlReplaceWebpackPlugin(
            htmlReplacements.map(({ search, replace }) => ({
               pattern: search,
               replacement: replace,
            })),
         ),

         new MiniCssExtractPlugin({
            filename: `styles/[name].css?${hashType}`,
            ignoreOrder: false,
         }),

         new ScriptExtHtmlWebpackPlugin({
            defaultAttribute: 'defer',
         }),

         new SpriteLoaderPlugin({
            plainSprite: true,
         }),

         ...(compact ? [
            new FriendlyErrorsWebpackPlugin({
               compilationSuccessInfo: {
                  messages: [chalk.blue('dashboard')],
                  notes: [
                     chalk`To create a production build run {blue npm run build}`,
                     (isServe) ? chalk`Project is running at {blue http://localhost:${SERVE_PORT}}` : '',
                  ].filter(n => n),
               },
            }),
         ] : []),

         ...(env.bundleAnalyzer ? [
            new BundleAnalyzerPlugin(),
         ] : []),

         ...getHtmlWebpackPlugins(pages, !isDev),

         ({ hooks }) => {
            if (!manageBackend) return;
            let done = false;

            hooks.done.tap('ManageGoPlugin', () => {
               if (done) return;
               done = true;

               runBackend();
            });
         },
      ],
   };

   return config;
});

function runBackend() {
   if (backendProcess) kill(backendProcess.pid);

   backendProcess = spawn('php', ['artisan', 'serve', '--port', REAL_PORT], {
      cwd: '../',
   });

   const { stdout, stderr } = backendProcess;
   stdout.on('data', (data) => process.stdout.write(chalk.cyan(data)));
   stderr.on('data', (data) => process.stderr.write(chalk.cyan(data)));

   return backendProcess;
}

function watchTemplateFiles() {
   chokidar.watch(`${PATHS.src}/**/*.{.blade.php,html}`, {
      awaitWriteFinish: true,
   }).on('change', () => {
      setTimeout(reload, 200);
   });
}

function watchPhpFiles() {
   const watchPath = path.resolve(__dirname, '../**/*.php');

   chokidar.watch(watchPath, {
      ignored: [
         path.resolve(__dirname, 'frontend'),
         path.resolve(__dirname, 'resources'),
         path.resolve(__dirname, 'vendor'),
      ],
   }).on('change', () => {
      setTimeout(reload, 200);
   });
}

function reload() {
   if (!devServer) return;
   devServer.sockWrite(devServer.sockets, 'content-changed');
}

function getPagesEntries(pages) {
   const entries = {};

   pages.filter(p => p.entry).forEach(({ name, entry }) => {
      entries[name] = path.join(PATHS.src, entry);
   });

   return entries;
}

function getHtmlWebpackPlugins(pages, minify) {
   const defHtmlWebpackPluginOptions = {
      inject: false,
      minify: (minify) ? minifyOptions : false,
   };

   return pages.filter(p => p.tmpl).map(({ name, tmpl, view }) => ({
      ...defHtmlWebpackPluginOptions,
      filename: path.join(PATHS.views, view),
      template: path.join(PATHS.src, tmpl),
      chunks: [name],
   })).map(c => new HtmlWebpackPlugin(c));
}
